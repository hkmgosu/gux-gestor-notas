# ========================================
# üîí AUTENTICACI√ìN
# ========================================

# Registrar usuario administrador
POST http://localhost:8000/api/register
Content-Type: application/json

{
  "name": "Admin User",
  "email": "admin@example.com",
  "password": "admin123"
}

###

# Iniciar sesi√≥n - Admin
POST http://localhost:8000/api/login
Content-Type: application/json

{
  "email": "admin@example.com",
  "password": "admin123"
}

###

# ========================================
# üìù GESTI√ìN DE NOTAS (ADMIN)
# ========================================

# Crear nota como admin
POST http://localhost:8000/api/notes
Content-Type: application/json
Authorization: Bearer TU_TOKEN_AQUI

{
  "title": "Nota Administrativa",
  "content": "Esta es una nota creada por el administrador para compartir",
  "is_public": false
}

###

# ========================================
# ‚ùå TESTS DE VALIDACI√ìN DE ERRORES
# ========================================

# Test 1: ID No Num√©rico (404 - Route not found)
PUT http://localhost:8000/api/notes/abc
Content-Type: application/json
Authorization: Bearer TU_TOKEN_AQUI

{
  "title": "Test ID inv√°lido",
  "content": "Este request deber√≠a fallar"
}

###

# Test 2: ID Cero (404 - Route not found)
PUT http://localhost:8000/api/notes/0
Content-Type: application/json
Authorization: Bearer TU_TOKEN_AQUI

{
  "title": "Test ID cero",
  "content": "Este request deber√≠a fallar"
}

###

# Test 3: ID Negativo (404 - Route not found)
DELETE http://localhost:8000/api/notes/-1
Authorization: Bearer TU_TOKEN_AQUI

###

# Test 4: ID Extremadamente Grande (500 -> 400)
PUT http://localhost:8000/api/notes/999999999999999999999
Content-Type: application/json
Authorization: Bearer TU_TOKEN_AQUI

{
  "title": "Test ID muy grande",
  "content": "Este request deber√≠a dar 400 Bad Request"
}

###

# Test 5: ID V√°lido Pero Nota No Existe (404)
PUT http://localhost:8000/api/notes/99999
Content-Type: application/json
Authorization: Bearer TU_TOKEN_AQUI

{
  "title": "Nota que no existe",
  "content": "Esta nota no deber√≠a existir"
}

###

# Obtener informaci√≥n del usuario
GET http://localhost:8000/api/me
Accept: application/json
Authorization: Bearer TU_TOKEN_AQUI

# Obtener notas
GET http://localhost:8000/api/notes
Accept: application/json
Authorization: Bearer TU_TOKEN_AQUI

# Obtener solo notas compartidas conmigo
GET http://localhost:8000/api/notes/shared
Accept: application/json
Authorization: Bearer TU_TOKEN_AQUI

# Crear nota
POST http://localhost:8000/api/notes
Content-Type: application/json
Accept: application/json
Authorization: Bearer TU_TOKEN_AQUI

{
  "title": "Mi primera nota",
  "content": "Este es el contenido de mi primera nota"
}

# Actualizar nota con id=1
PUT http://localhost:8000/api/notes/1
Content-Type: application/json
Accept: application/json
Authorization: Bearer TU_TOKEN_AQUI

{
  "title": "T√≠tulo actualizado",
  "content": "Contenido actualizado"
}

# Borrar nota con id=1
DELETE http://localhost:8000/api/notes/1
Accept: application/json
Authorization: Bearer TU_TOKEN_AQUI

# Compartir nota con id=1
POST http://localhost:8000/api/notes/1/share
Content-Type: application/json
Accept: application/json
Authorization: Bearer TU_TOKEN_AQUI

{
  "email": "otro_usuario@ejemplo.com"
}

###

# Cerrar sesi√≥n (invalidar token)
POST http://localhost:8000/api/logout
Accept: application/json
Authorization: Bearer TU_TOKEN_AQUI

###

# EJEMPLO CON TOKEN REAL (para pruebas r√°pidas):
# 1. Ejecuta este registro para obtener un token v√°lido:

POST http://localhost:8000/api/register
Content-Type: application/json
Accept: application/json

{
  "name": "Usuario Demo",
  "email": "demo@ejemplo.com",
  "password": "password123"
}

# 2. Copia el token de la respuesta y √∫salo en las siguientes peticiones

###

# Test endpoint - verificar que la API est√° funcionando
GET http://localhost:8000/api/me
Accept: application/json
Authorization: Bearer TU_TOKEN_AQUI

###

# PRUEBA COMPLETA DE COMPARTIR NOTAS:

# 1. Registrar primer usuario
POST http://localhost:8000/api/register
Content-Type: application/json
Accept: application/json

{
  "name": "Usuario Uno",
  "email": "usuario1@test.com",
  "password": "password123"
}

# 2. Crear una nota con el primer usuario (usa el token del paso 1)
POST http://localhost:8000/api/notes
Content-Type: application/json
Accept: application/json
Authorization: Bearer TOKEN_USUARIO_1

{
  "title": "Nota compartida",
  "content": "Esta nota ser√° compartida con el usuario 2"
}

# 3. Compartir la nota con el segundo usuario (usa ID de la nota creada arriba)
POST http://localhost:8000/api/notes/1/share
Content-Type: application/json
Accept: application/json
Authorization: Bearer TOKEN_USUARIO_1

{
  "email": "usuario2@test.com"
}

# 4. Registrar segundo usuario
POST http://localhost:8000/api/register
Content-Type: application/json
Accept: application/json

{
  "name": "Usuario Dos",
  "email": "usuario2@test.com",
  "password": "password123"
}

# 5. Ver todas las notas del segundo usuario (deber√≠a incluir la nota compartida)
GET http://localhost:8000/api/notes
Accept: application/json
Authorization: Bearer TOKEN_USUARIO_2

# 6. Ver solo notas compartidas con el segundo usuario
GET http://localhost:8000/api/notes/shared
Accept: application/json
Authorization: Bearer TOKEN_USUARIO_2

###

# PRUEBAS DE EDICI√ìN DE NOTAS COMPARTIDAS:

# 1. Registrar primer usuario (propietario)
POST http://localhost:8000/api/register
Content-Type: application/json
Accept: application/json

{
  "name": "Usuario Propietario",
  "email": "propietario@test.com",
  "password": "password123"
}

# 2. Crear una nota como propietario (usa el token del paso 1)
POST http://localhost:8000/api/notes
Content-Type: application/json
Accept: application/json
Authorization: Bearer TOKEN_PROPIETARIO

{
  "title": "Nota para compartir",
  "content": "Esta nota ser√° compartida y editada por otro usuario"
}

# 3. Compartir la nota con otro usuario (usa ID de la nota creada arriba)
POST http://localhost:8000/api/notes/1/share
Content-Type: application/json
Accept: application/json
Authorization: Bearer TOKEN_PROPIETARIO

{
  "email": "editor@test.com"
}

# 4. Registrar segundo usuario (editor compartido)
POST http://localhost:8000/api/register
Content-Type: application/json
Accept: application/json

{
  "name": "Usuario Editor",
  "email": "editor@test.com",
  "password": "password123"
}

# 5. üîç VERIFICAR PERMISOS del usuario editor sobre la nota
GET http://localhost:8000/api/notes/1/permissions
Accept: application/json
Authorization: Bearer TOKEN_EDITOR

# 6. ‚úèÔ∏è EDITAR LA NOTA COMPARTIDA como usuario editor
PUT http://localhost:8000/api/notes/1
Content-Type: application/json
Accept: application/json
Authorization: Bearer TOKEN_EDITOR

{
  "title": "Nota editada por usuario compartido",
  "content": "Este contenido fue modificado por el usuario con quien se comparti√≥ la nota"
}

# 7. Verificar que los cambios se guardaron correctamente
GET http://localhost:8000/api/notes/1
Accept: application/json
Authorization: Bearer TOKEN_EDITOR

# 8. Registrar tercer usuario (no compartido)
POST http://localhost:8000/api/register
Content-Type: application/json
Accept: application/json

{
  "name": "Usuario No Autorizado",
  "email": "noautorizado@test.com",
  "password": "password123"
}

# 9. ‚ùå INTENTAR EDITAR sin permisos (deber√≠a fallar con 403)
PUT http://localhost:8000/api/notes/1
Content-Type: application/json
Accept: application/json
Authorization: Bearer TOKEN_NO_AUTORIZADO

{
  "title": "Intento de edici√≥n no autorizada",
  "content": "Este contenido no deber√≠a guardarse"
}

###

# PRUEBAS DEL ADMINISTRADOR:

# 1. Login del administrador (creado autom√°ticamente en la base de datos)
POST http://localhost:8000/api/login
Content-Type: application/json
Accept: application/json

{
  "email": "admin@example.com",
  "password": "admin123"
}

# 2. Ver todas las notas como administrador (debe ver TODAS las notas del sistema)
GET http://localhost:8000/api/notes
Accept: application/json
Authorization: Bearer TOKEN_ADMIN

# 3. Login del usuario de test (tambi√©n creado autom√°ticamente)
POST http://localhost:8000/api/login
Content-Type: application/json
Accept: application/json

{
  "email": "test@example.com",
  "password": "password"
}

# 4. Ver notas como usuario normal (solo ve sus propias notas, p√∫blicas y compartidas)
GET http://localhost:8000/api/notes
Accept: application/json
Authorization: Bearer TOKEN_TEST_USER
