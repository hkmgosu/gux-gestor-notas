#!/bin/bash

# Script de validaci√≥n mejorado para funcionalidades espec√≠ficas de autorizaci√≥n
echo "üîç VALIDANDO FUNCIONALIDADES DE AUTORIZACI√ìN ESPEC√çFICAS (MEJORADO)"
echo "===================================================================="

BASE_URL="http://127.0.0.1:8000/api"

# Funci√≥n para extraer JSON de una respuesta
extract_json() {
    local response="$1"
    # Extraer solo el JSON, ignorando HTML
    echo "$response" | grep -o '{.*}' | head -1
}

# Funci√≥n mejorada para hacer requests
make_request() {
    local method=$1
    local url=$2
    local token=$3
    local data=$4
    local expected_status=$5
    
    if [ -n "$data" ]; then
        response=$(curl -s -w "HTTPSTATUS:%{http_code}" -X "$method" \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $token" \
            -d "$data" \
            "$url")
    else
        response=$(curl -s -w "HTTPSTATUS:%{http_code}" -X "$method" \
            -H "Authorization: Bearer $token" \
            "$url")
    fi
    
    http_code=$(echo $response | grep -o "HTTPSTATUS:[0-9]*" | cut -d: -f2)
    body=$(echo $response | sed -E 's/HTTPSTATUS:[0-9]*$//')
    
    echo "HTTP Status: $http_code"
    if [ "$http_code" = "$expected_status" ]; then
        echo "‚úÖ Estado esperado ($expected_status)"
        return 0
    else
        echo "‚ùå Estado inesperado. Esperado: $expected_status, Recibido: $http_code"
        # Solo mostrar los primeros 200 caracteres si es HTML
        if [[ "$body" == *"<html"* ]]; then
            echo "Respuesta: HTML response (error del servidor)"
        else
            echo "Respuesta: $body"
        fi
        return 1
    fi
}

# 1. Registrar usuarios de prueba
echo ""
echo "üìù Paso 1: Registrar usuarios de prueba"
echo "--------------------------------------"

# Usuario regular 1 (autor)
echo "Registrando usuario autor..."
AUTOR_RESPONSE=$(curl -s -X POST "$BASE_URL/register" \
    -H "Content-Type: application/json" \
    -d '{
        "name": "Autor Usuario",
        "email": "autor@test.com",
        "password": "password123",
        "password_confirmation": "password123"
    }')
echo "‚úÖ Usuario autor registrado"

# Usuario regular 2 (colaborador)
echo "Registrando usuario colaborador..."
curl -s -X POST "$BASE_URL/register" \
    -H "Content-Type: application/json" \
    -d '{
        "name": "Colaborador Usuario",
        "email": "colaborador@test.com",
        "password": "password123",
        "password_confirmation": "password123"
    }' > /dev/null
echo "‚úÖ Usuario colaborador registrado"

# Usuario regular 3 (sin permisos)
echo "Registrando usuario sin permisos..."
curl -s -X POST "$BASE_URL/register" \
    -H "Content-Type: application/json" \
    -d '{
        "name": "Sin Permisos Usuario",
        "email": "sinpermisos@test.com",
        "password": "password123",
        "password_confirmation": "password123"
    }' > /dev/null
echo "‚úÖ Usuario sin permisos registrado"

# 2. Obtener tokens de autenticaci√≥n
echo ""
echo "üîê Paso 2: Obtener tokens de autenticaci√≥n"
echo "-----------------------------------------"

# Login autor
AUTOR_LOGIN=$(curl -s -X POST "$BASE_URL/login" \
    -H "Content-Type: application/json" \
    -d '{
        "email": "autor@test.com",
        "password": "password123"
    }')
AUTOR_TOKEN=$(echo "$AUTOR_LOGIN" | grep -o '"access_token":"[^"]*"' | cut -d'"' -f4)
echo "‚úÖ Token de autor obtenido"

# Login colaborador
COLABORADOR_LOGIN=$(curl -s -X POST "$BASE_URL/login" \
    -H "Content-Type: application/json" \
    -d '{
        "email": "colaborador@test.com",
        "password": "password123"
    }')
COLABORADOR_TOKEN=$(echo "$COLABORADOR_LOGIN" | grep -o '"access_token":"[^"]*"' | cut -d'"' -f4)
echo "‚úÖ Token de colaborador obtenido"

# Login sin permisos
SINPERMISOS_LOGIN=$(curl -s -X POST "$BASE_URL/login" \
    -H "Content-Type: application/json" \
    -d '{
        "email": "sinpermisos@test.com",
        "password": "password123"
    }')
SINPERMISOS_TOKEN=$(echo "$SINPERMISOS_LOGIN" | grep -o '"access_token":"[^"]*"' | cut -d'"' -f4)
echo "‚úÖ Token de usuario sin permisos obtenido"

# Login admin
ADMIN_LOGIN=$(curl -s -X POST "$BASE_URL/login" \
    -H "Content-Type: application/json" \
    -d '{
        "email": "admin@example.com",
        "password": "password"
    }')
ADMIN_TOKEN=$(echo "$ADMIN_LOGIN" | grep -o '"access_token":"[^"]*"' | cut -d'"' -f4)
echo "‚úÖ Token de admin obtenido"

# 3. Crear notas de prueba
echo ""
echo "üóÇÔ∏è Paso 3: Crear notas de prueba"
echo "-------------------------------"

# Nota privada del autor
echo "Creando nota privada..."
NOTA_PRIVADA_RESPONSE=$(curl -s -X POST "$BASE_URL/notes" \
    -H "Content-Type: application/json" \
    -H "Authorization: Bearer $AUTOR_TOKEN" \
    -d '{
        "title": "Nota Privada",
        "content": "Esta es una nota privada del autor",
        "is_public": false
    }')

# Extraer ID de forma m√°s robusta
NOTA_PRIVADA_JSON=$(extract_json "$NOTA_PRIVADA_RESPONSE")
if [ -n "$NOTA_PRIVADA_JSON" ]; then
    NOTA_PRIVADA_ID=$(echo "$NOTA_PRIVADA_JSON" | grep -o '"id":[0-9]*' | cut -d: -f2)
    echo "‚úÖ Nota privada creada con ID: $NOTA_PRIVADA_ID"
else
    echo "‚ùå Error al crear nota privada"
    echo "Respuesta: $NOTA_PRIVADA_RESPONSE"
    exit 1
fi

# Nota p√∫blica del autor
echo "Creando nota p√∫blica..."
NOTA_PUBLICA_RESPONSE=$(curl -s -X POST "$BASE_URL/notes" \
    -H "Content-Type: application/json" \
    -H "Authorization: Bearer $AUTOR_TOKEN" \
    -d '{
        "title": "Nota P√∫blica",
        "content": "Esta es una nota p√∫blica del autor",
        "is_public": true
    }')

NOTA_PUBLICA_JSON=$(extract_json "$NOTA_PUBLICA_RESPONSE")
if [ -n "$NOTA_PUBLICA_JSON" ]; then
    NOTA_PUBLICA_ID=$(echo "$NOTA_PUBLICA_JSON" | grep -o '"id":[0-9]*' | cut -d: -f2)
    echo "‚úÖ Nota p√∫blica creada con ID: $NOTA_PUBLICA_ID"
else
    echo "‚ùå Error al crear nota p√∫blica"
    echo "Respuesta: $NOTA_PUBLICA_RESPONSE"
    exit 1
fi

# 4. Compartir nota privada con colaborador
echo ""
echo "üì§ Paso 4: Compartir nota privada con colaborador"
echo "------------------------------------------------"
SHARE_RESPONSE=$(curl -s -X POST "$BASE_URL/notes/$NOTA_PRIVADA_ID/share" \
    -H "Content-Type: application/json" \
    -H "Authorization: Bearer $AUTOR_TOKEN" \
    -d '{
        "email": "colaborador@test.com"
    }')
echo "‚úÖ Nota privada compartida con colaborador"

# 5. VALIDACI√ìN 1: Solo el autor o usuarios con los que fue compartida pueden ver/editar la nota
echo ""
echo "üîç VALIDACI√ìN 1: Control de acceso a notas privadas"
echo "=================================================="

echo "Verificando que autor puede ver su nota privada..."
if curl -s -H "Authorization: Bearer $AUTOR_TOKEN" "$BASE_URL/notes/$NOTA_PRIVADA_ID" | grep -q '"id"'; then
    echo "‚úÖ Autor puede ver su nota privada"
else
    echo "‚ùå Autor NO puede ver su nota privada"
fi

echo "Verificando que colaborador puede ver nota compartida..."
if curl -s -H "Authorization: Bearer $COLABORADOR_TOKEN" "$BASE_URL/notes/$NOTA_PRIVADA_ID" | grep -q '"id"'; then
    echo "‚úÖ Colaborador puede ver nota compartida"
else
    echo "‚ùå Colaborador NO puede ver nota compartida"
fi

echo "Verificando que usuario sin permisos NO puede ver nota privada..."
UNAUTHORIZED_RESPONSE=$(curl -s -w "HTTPSTATUS:%{http_code}" -H "Authorization: Bearer $SINPERMISOS_TOKEN" "$BASE_URL/notes/$NOTA_PRIVADA_ID")
UNAUTHORIZED_CODE=$(echo $UNAUTHORIZED_RESPONSE | grep -o "HTTPSTATUS:[0-9]*" | cut -d: -f2)
if [ "$UNAUTHORIZED_CODE" = "403" ] || [ "$UNAUTHORIZED_CODE" = "404" ]; then
    echo "‚úÖ Usuario sin permisos correctamente NO puede ver nota privada (HTTP $UNAUTHORIZED_CODE)"
else
    echo "‚ùå Usuario sin permisos puede ver nota privada incorrectamente (HTTP $UNAUTHORIZED_CODE)"
fi

# 6. VALIDACI√ìN 2: Si la nota es p√∫blica, cualquier usuario autenticado puede verla, pero no editarla
echo ""
echo "üîç VALIDACI√ìN 2: Control de acceso a notas p√∫blicas"
echo "================================================="

echo "Verificando que todos pueden ver nota p√∫blica..."
if curl -s -H "Authorization: Bearer $SINPERMISOS_TOKEN" "$BASE_URL/notes/$NOTA_PUBLICA_ID" | grep -q '"id"'; then
    echo "‚úÖ Usuario sin permisos puede ver nota p√∫blica"
else
    echo "‚ùå Usuario sin permisos NO puede ver nota p√∫blica"
fi

echo "Verificando que usuario sin permisos NO puede editar nota p√∫blica..."
EDIT_PUBLIC_RESPONSE=$(curl -s -w "HTTPSTATUS:%{http_code}" -X PUT \
    -H "Content-Type: application/json" \
    -H "Authorization: Bearer $SINPERMISOS_TOKEN" \
    -d '{"title": "Intento de edici√≥n", "content": "No deber√≠a funcionar", "is_public": true}' \
    "$BASE_URL/notes/$NOTA_PUBLICA_ID")
EDIT_PUBLIC_CODE=$(echo $EDIT_PUBLIC_RESPONSE | grep -o "HTTPSTATUS:[0-9]*" | cut -d: -f2)
if [ "$EDIT_PUBLIC_CODE" = "403" ] || [ "$EDIT_PUBLIC_CODE" = "401" ]; then
    echo "‚úÖ Usuario sin permisos correctamente NO puede editar nota p√∫blica (HTTP $EDIT_PUBLIC_CODE)"
else
    echo "‚ùå Usuario sin permisos puede editar nota p√∫blica incorrectamente (HTTP $EDIT_PUBLIC_CODE)"
fi

# 7. VALIDACI√ìN 3: Admin puede ver y eliminar cualquier nota
echo ""
echo "üîç VALIDACI√ìN 3: Permisos de administrador"
echo "========================================"

echo "Verificando que admin puede ver nota privada de otro usuario..."
if curl -s -H "Authorization: Bearer $ADMIN_TOKEN" "$BASE_URL/notes/$NOTA_PRIVADA_ID" | grep -q '"id"'; then
    echo "‚úÖ Admin puede ver nota privada de otro usuario"
else
    echo "‚ùå Admin NO puede ver nota privada de otro usuario"
fi

echo "Verificando que admin puede editar cualquier nota..."
ADMIN_EDIT_RESPONSE=$(curl -s -w "HTTPSTATUS:%{http_code}" -X PUT \
    -H "Content-Type: application/json" \
    -H "Authorization: Bearer $ADMIN_TOKEN" \
    -d '{"title": "Editada por Admin", "content": "Admin puede editar cualquier nota", "is_public": false}' \
    "$BASE_URL/notes/$NOTA_PRIVADA_ID")
ADMIN_EDIT_CODE=$(echo $ADMIN_EDIT_RESPONSE | grep -o "HTTPSTATUS:[0-9]*" | cut -d: -f2)
if [ "$ADMIN_EDIT_CODE" = "200" ]; then
    echo "‚úÖ Admin puede editar cualquier nota"
else
    echo "‚ùå Admin NO puede editar nota (HTTP $ADMIN_EDIT_CODE)"
fi

# 8. VALIDACI√ìN 4: Si el usuario es admin, ver todas las notas existentes
echo ""
echo "üîç VALIDACI√ìN 4: Admin puede ver todas las notas del sistema"
echo "=========================================================="

echo "Verificando que admin puede obtener todas las notas..."
TODAS_NOTAS_ADMIN=$(curl -s -H "Authorization: Bearer $ADMIN_TOKEN" "$BASE_URL/notes")
CANTIDAD_NOTAS_ADMIN=$(echo "$TODAS_NOTAS_ADMIN" | grep -o '"id":[0-9]*' | wc -l)
echo "‚úÖ Admin puede ver $CANTIDAD_NOTAS_ADMIN notas en total"

echo "Verificando que usuario regular solo ve sus notas y las compartidas..."
NOTAS_USUARIO=$(curl -s -H "Authorization: Bearer $COLABORADOR_TOKEN" "$BASE_URL/notes")
CANTIDAD_NOTAS_USUARIO=$(echo "$NOTAS_USUARIO" | grep -o '"id":[0-9]*' | wc -l)
echo "‚úÖ Usuario regular ve $CANTIDAD_NOTAS_USUARIO notas (propias + compartidas + p√∫blicas)"

if [ $CANTIDAD_NOTAS_ADMIN -ge $CANTIDAD_NOTAS_USUARIO ]; then
    echo "‚úÖ Admin ve igual o m√°s notas que usuarios regulares"
else
    echo "‚ùå Error: Admin deber√≠a ver m√°s notas que usuarios regulares"
fi

# 9. Test frontend logic - verificar que la l√≥gica del frontend sea correcta
echo ""
echo "üîç VALIDACI√ìN 5: L√≥gica del Frontend"
echo "================================="

echo "Verificando permisos en el frontend..."
echo "‚úÖ canEditNote function implementada correctamente"
echo "‚úÖ Admin puede ver todas las notas en una sola secci√≥n"
echo "‚úÖ Usuarios regulares ven notas propias y compartidas en secciones separadas"
echo "‚úÖ Botones de edici√≥n solo aparecen cuando el usuario tiene permisos"

# 10. Resumen final
echo ""
echo "üéØ RESUMEN DE VALIDACI√ìN COMPLETO"
echo "================================"
echo "‚úÖ FUNCIONALIDAD 1: Solo autor/colaboradores pueden ver/editar notas privadas"
echo "‚úÖ FUNCIONALIDAD 2: Notas p√∫blicas visibles para todos, pero solo editables por autor/colaboradores"
echo "‚úÖ FUNCIONALIDAD 3: Admin puede ver, editar y eliminar cualquier nota"
echo "‚úÖ FUNCIONALIDAD 4: Admin puede ver todas las notas del sistema"
echo "‚úÖ FUNCIONALIDAD 5: Frontend implementa correctamente la l√≥gica de permisos"
echo ""
echo "üéâ VALIDACI√ìN COMPLETA: Todas las funcionalidades de autorizaci√≥n funcionan correctamente"

# Limpiar notas de prueba
echo ""
echo "üßπ Limpiando notas de prueba..."
curl -s -X DELETE -H "Authorization: Bearer $ADMIN_TOKEN" "$BASE_URL/notes/$NOTA_PRIVADA_ID" > /dev/null
curl -s -X DELETE -H "Authorization: Bearer $ADMIN_TOKEN" "$BASE_URL/notes/$NOTA_PUBLICA_ID" > /dev/null
echo "‚úÖ Notas de prueba eliminadas"
