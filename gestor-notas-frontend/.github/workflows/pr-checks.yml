name: Pull Request Checks

on:
  pull_request:
    branches: [main, develop]
    types: [opened, synchronize, reopened]

jobs:
  changes:
    name: Detect Changes
    runs-on: ubuntu-latest
    outputs:
      frontend: ${{ steps.changes.outputs.frontend }}
      tests: ${{ steps.changes.outputs.tests }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Check for changes
        uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            frontend:
              - 'src/**'
              - 'pages/**'
              - 'public/**'
              - 'styles/**'
              - 'package*.json'
              - 'next.config.*'
              - 'tsconfig.json'
              - 'tailwind.config.*'
            tests:
              - 'src/**/*.test.{js,ts,tsx}'
              - '__tests__/**'
              - 'jest.config.*'
              - 'jest.setup.*'

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.frontend == 'true' || needs.changes.outputs.tests == 'true'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20.x"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run tests with coverage
        run: npm run test:ci

      - name: Comment test results
        uses: actions/github-script@v6
        if: always()
        with:
          script: |
            const fs = require('fs');

            let comment = '## üß™ Test Results\n\n';

            if (fs.existsSync('./coverage/lcov-report/index.html')) {
              comment += '‚úÖ Tests passed with coverage report generated\n';
            } else {
              comment += '‚ùå Tests failed or no coverage generated\n';
            }

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

  lint:
    name: Code Quality
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.frontend == 'true'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20.x"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint

      - name: Run TypeScript check
        run: npm run type-check

  build:
    name: Build Check
    runs-on: ubuntu-latest
    needs: [changes, test, lint]
    if: needs.changes.outputs.frontend == 'true'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20.x"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Comment build results
        uses: actions/github-script@v6
        if: always()
        with:
          script: |
            const comment = '## üèóÔ∏è Build Status\n\n‚úÖ Build completed successfully for this PR!';

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
